// -*- tab-width: 4; -*-
//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy
// of the License at http://www.mozilla.org/MPL/
//
// Software distributed under the License is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// The Original Code is State Machine Compiler (SMC).
//
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
//
// Contributor(s):
//      Port to C by Francois Perrad, francois.perrad@gadz.org
//
// State Machine
//	Stoplight
//
// Description
//
// RCS ID
// $Id: stoplight.sm,v 1.2 2007/08/05 13:43:36 cwrapp Exp $
//
// CHANGE LOG
// $Log: stoplight.sm,v $
// Revision 1.2  2007/08/05 13:43:36  cwrapp
// Version 5.0.1 check-in. See net/sf/smc/CODE_README.txt for more information.
//
// Revision 1.1  2005/06/16 18:00:35  fperrad
// Added C examples 1 - 4
//
//

%{
%}

%start startup::IPStateUnknown
%class context
%header brick-state.h
%package IPresolv

%map startup
%%
// State
IPStateUnknown
{
    Timeout
        IPStateUnknown
        {
            /* Maps to <package>_context_<method_name> i.e. IPresolv_context_update_table */
            update_table();
        }
    Incoming
        [context_is_unique(ctxt)]
        IPUnique
        {
            update_table();
        }
    Incoming
        [context_is_mine(ctxt) && !context_is_unique(ctxt)]
        IPAddressConflict
        {
            update_table();
        }
    Default
        IPStateUnknown
        {
            update_table();
        }
}

IPAddressConflict
{
    Timeout
        IPAddressConflict
        {
            update_table();
        }
    Incoming
        [!context_is_unique(ctxt) && !context_is_mine(ctxt)] 
        IPUnique
        {
            update_table();
        }
    Incoming
        [!context_is_unique(ctxt) && context_is_mine(ctxt)] 
        IPAddressConflict
        {
            update_table();
        }
    Default
        IPAddressConflict
        {
            update_table();
        }
}

IPUnique
{
    Timeout
        IPUnique
        {
            update_table();
        }
    Incoming
        [!context_is_unique(ctxt) && !context_is_mine(ctxt)] 
        IPUnique
        {
            update_table();
        }
    Incoming
        [!context_is_unique(ctxt) && context_is_mine(ctxt)] 
        IPAddressConflict
        {
            update_table();
        }
    Default
        IPUnique
        {
            update_table();
        }
}
%%
